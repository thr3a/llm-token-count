name: Build and Release

on:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write

env:
  TZ: Asia/Tokyo

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: darwin
            goarch: amd64
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23.5"

      - name: Build
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o count-token-${{ matrix.goos }}-${{ matrix.goarch }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.${{ github.run_number }}
          release_name: Release v1.0.${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Asset (Linux x86_64)
        if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./count-token-linux-amd64
          asset_name: count-token-linux-amd64
          asset_content_type: application/octet-stream

      - name: Upload Release Asset (Darwin arm64)
        if: matrix.goos == 'darwin' && matrix.goarch == 'arm64'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./count-token-darwin-arm64
          asset_name: count-token-darwin-arm64
          asset_content_type: application/octet-stream
